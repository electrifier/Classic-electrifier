using electrifier.Core.Forms;
using System;
using System.IO;
using System.Windows.Forms;
using System.Xml;

namespace electrifier.Core {

	/// <summary>
	/// AppContext acts as a singleton which instantiates all the basic services and gets the user interface started up
	/// 
	/// See https://msdn.microsoft.com/en-us/library/ff650316.aspx for details on implementation of the singleton
	/// </summary>

	public sealed partial class AppContext : ApplicationContext, IPersistentFormContainer {

		//
		// Static member variables and properties
		//
		public static readonly string ConfigFileName = @"electrifier.config.xml";
		public static string ConfigFileFullPathName {
			get {
				if (AppContext.IsPortable)
					return Path.Combine(Application.StartupPath, AppContext.ConfigFileName);
				else
					return Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), @"electrifier", AppContext.ConfigFileName);
			}
		}
		public static readonly ConfigFormatVersion ConfigFileVersion = new ConfigFormatVersion("0.1");

		#region ConfigFormatVersion

		/// <summary>
		/// Struct: ConfigFormatVersion
		/// </summary>
		public struct ConfigFormatVersion {
			public readonly string FormatVersion;
			public readonly string[] CompatibleVersions;

			public ConfigFormatVersion(string formatVersion) {
				this.FormatVersion = formatVersion;
				this.CompatibleVersions = new string[] {
					// TODO: Add former compatible format version strings here!
				};
			}

			public bool IsComptibleVersion(string formatVersion) {
				if (this.FormatVersion.Equals(formatVersion))
					return true;

				foreach (string version in this.CompatibleVersions) {
					if (version.Equals(formatVersion))
						return true;
				}

				return false;
			}

			public override string ToString() {
				return this.FormatVersion;
			}
		}

		#endregion

		public bool RestoreConfiguration() {
			return RestoreConfiguration(AppContext.ConfigFileFullPathName);
		}

		public bool RestoreConfiguration(string configFileName) {
			if (File.Exists(configFileName)) {

				// Open existing configuration file

				using (var configFileStream = new FileStream(configFileName, FileMode.Open, FileAccess.Read)) {
					using (var xmlReader = new XmlTextReader(configFileStream)) {
						xmlReader.WhitespaceHandling = WhitespaceHandling.None;

						xmlReader.MoveToContent();

						if (!"electrifier".Equals(xmlReader.Name))
							throw new Exception("XML-Format!");   // TODO: XMLFormatException

						if (!"Configuration".Equals(xmlReader.GetAttribute("Content")))
							throw new Exception("XML-Content!");    // TODO: XMLFormatException

						if (!ConfigFileVersion.IsComptibleVersion(xmlReader.GetAttribute("FormatVersion")))
							throw new Exception("XML-Version incomptible!");    // TODO: XMLFormatException

						this.ApplyPersistenceInfo(xmlReader);

						return true;
					}
				}
			}

			return false;
		}

		public void SaveConfiguration() {
			SaveConfiguration(AppContext.ConfigFileFullPathName);
		}

		public void SaveConfiguration(string configFileName) {
			string newConfigFullPathFileName = configFileName + ".new";

			try {
				var newConfigFullPathFileInfo = new FileInfo(newConfigFullPathFileName);

				// Ensure the directory exists
				if (!newConfigFullPathFileInfo.Directory.Exists)
					newConfigFullPathFileInfo.Directory.Create();

				// Create new configuration file
				using (var configFileStream = new FileStream(newConfigFullPathFileName, FileMode.Create)) {
					using (var xmlWriter = XmlWriter.Create(configFileStream, new XmlWriterSettings() {
						Encoding = System.Text.Encoding.Unicode,
						Indent = true,
						IndentChars = "  "
					})) {
						xmlWriter.WriteStartDocument();
						xmlWriter.WriteComment("\n\n" +
							"\telectrifier configuration file\n\n" +
							"\tThis is a machine generated file, created by electrifier application.\n" +
							"\tFor more information about electrifier visit http://www.electrifier.org\n\n" +
							"\tDO NOT EDIT THIS FILE MANUALLY, CHANGES MAY CAUSE THE\n" +
							"\tCONTAINED CONFIGURATION INFORMATION BECOME CORRUPTED!\n\n" +
							"\tCopyright (c) 2016 Thorsten Jung @ electrifier.org and contributors.\n\n");

						// Create root xml node
						xmlWriter.WriteStartElement("electrifier");
						xmlWriter.WriteAttributeString("Content", "Configuration");
						xmlWriter.WriteAttributeString("FormatVersion", ConfigFileVersion.FormatVersion);
						xmlWriter.WriteAttributeString("Created", String.Format("{0:s}", DateTime.UtcNow));

						// Create persistence information
						this.CreatePersistenceInfo(xmlWriter);

						xmlWriter.WriteEndElement(); // electrifier
						xmlWriter.WriteEndDocument();

						xmlWriter.Close();
						configFileStream.Close();
					}
				}

				// If an old version of configuration file exists create backup and replace it by the new one
				try {
					if (File.Exists(configFileName))
						newConfigFullPathFileInfo.Replace(configFileName, (configFileName + ".bak"));
					else
						File.Move(newConfigFullPathFileName, configFileName);
				} catch (Exception e) {
					MessageBox.Show("AppContext.SaveConfiguration: Error while replacing configuration file: \n\n" + e.Message,
						"electrifier: We're sorry, but a runtime error occurred!", MessageBoxButtons.OK, MessageBoxIcon.Error);
				}
			} catch (Exception e) {
				MessageBox.Show("AppContext.SaveConfiguration: Error while writing configuration file: \n\n" + e.Message,
					"electrifier: We're sorry, but a runtime error occurred!", MessageBoxButtons.OK, MessageBoxIcon.Error);
			}
		}

		#region IPersistentFormContainer Member
		public void CreatePersistenceInfo(System.Xml.XmlWriter xmlWriter) {
			xmlWriter.WriteStartElement("AppContext");
			xmlWriter.WriteStartElement("OpenedWindows");

			//// TODO: add global settings to appcontextnode

			// Append persistence information for every open window
			foreach (IPersistentForm persistentForm in AppContext.openWindowList)
				persistentForm.CreatePersistenceInfo(xmlWriter);

			xmlWriter.WriteEndElement(); // OpenedWindows
			xmlWriter.WriteEndElement(); // AppContext
		}

		public void ApplyPersistenceInfo(XmlTextReader xmlReader) {
			MoveToNextElement(xmlReader);
			if (!"AppContext".Equals(xmlReader.Name))
				throw new Exception("XML-Format!");   // TODO: XMLFormatException

			MoveToNextElement(xmlReader);
			if (!"OpenedWindows".Equals(xmlReader.Name))
				throw new Exception("XML-Format!");   // TODO: XMLFormatException

			while(MoveToNextElement(xmlReader)) {
				switch (xmlReader.Name) {
					case "MainWindowForm":
						MainWindowForm mainWindowForm = new MainWindowForm(xmlReader);

						mainWindowForm.AttachToFormContainer(this);
						break;
					default:
						throw new Exception("XML-Content: Wrong Form!");
				}
			}
		}

		/// <summary>
		/// Moves the internal cursor of XmlTextReader to the next opening element tag.
		/// </summary>
		/// <param name="xmlIn">XMLTextReader to read from</param>
		/// <returns>bool true if successful, false otherwiese (e.g. reached end of file)</returns>
		public static bool MoveToNextElement(XmlTextReader xmlIn) {
			if (!xmlIn.Read())
				return false;

			while (XmlNodeType.EndElement == xmlIn.NodeType) {
				if (!xmlIn.Read())
					return false;
			}

			return true;
		}


		public void AttachPersistentForm(IPersistentForm persistentForm) {
			if (!AppContext.openWindowList.Contains(persistentForm)) {
				AppContext.openWindowList.Add(persistentForm);
			} else {
				throw new ArgumentException("Given Form instance already in list of hosted Forms", "persistentForm");
			}
		}

		public void DetachPersistentForm(IPersistentForm persistentForm) {
			if (AppContext.openWindowList.Contains(persistentForm)) {
				AppContext.openWindowList.Remove(persistentForm);
			} else {
				throw new ArgumentException("Given Form instance not in list of hosted Forms", "persistentForm");
			}
		}
		#endregion IPersistentFormContainer Member
	}
}
